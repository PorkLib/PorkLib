/*
 * Adapted from the Wizardry License
 *
 * Copyright (c) 2018-2018 DaPorkchop_ and contributors
 *
 * Permission is hereby granted to any persons and/or organizations using this software to copy, modify, merge, publish, and distribute it. Said persons and/or organizations are not allowed to use the software or any derivatives of the work for commercial use or any other means to generate income, nor are they allowed to claim this software as their own.
 *
 * The persons and/or organizations are also disallowed from sub-licensing and/or trademarking this software without explicit permission from DaPorkchop_.
 *
 * Any persons and/or organizations using this software must disclose their source code and have it publicly available, include this license, provide sufficient credit to the original authors of the project (IE: DaPorkchop_), as well as provide a link to the original project.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

package net.daporkchop.lib.primitive.map.sync;

import net.daporkchop.lib.primitive.lambda.consumer._P1_Consumer;
import net.daporkchop.lib.primitive.lambda.consumer._P2_Consumer;
import net.daporkchop.lib.primitive.lambda.consumer.bi._P1__P2_Consumer;
import net.daporkchop.lib.primitive.map._P1__P2_Map;
import net.daporkchop.lib.primitive.iterator._P1_Iterator;
import net.daporkchop.lib.primitive.iterator._P2_Iterator;
import net.daporkchop.lib.primitive.iterator.bi._P1__P2_Iterator;

import lombok.*;

/**
 * A synchronized map, using a key type of _p1_ and a value type of _p2_.
 * This doesn't do anything by itself, it just serves as a wrapper for another instance of _P1__P2_Map.
 * <p>
 * DO NOT EDIT BY HAND! THIS FILE IS SCRIPT-GENERATED!
 *
 * @author DaPorkchop_
 */
public class _P1__P2_SynchronizedMap_GH_ implements _P1__P2_Map_GHI_    {
    private final Object sync;
    private final _P1__P2_Map_GHI_ map;

    public _P1__P2_SynchronizedMap(_P1__P2_Map_GHI_ map)    {
        this(map, map);
    }

    public _P1__P2_SynchronizedMap(@NonNull _P1__P2_Map_GHI_ map, @NonNull Object sync)    {
        this.sync = sync;
        this.map = map;
    }

    @Override
    public _p2_ get(_p1_ key)   {
        synchronized (sync) {
            return map.get(key);
        }
    }

    @Override
    public _p2_ put(_p1_ key, _p2_ value)   {
        synchronized (sync) {
            return map.put(key, value);
        }
    }

    @Override
    public _p2_ remove(_p1_ key)    {
        synchronized (sync) {
            return map.remove(key);
        }
    }

    @Override
    public boolean containsKey(_p1_ key)    {
        synchronized (sync) {
            return map.containsKey(key);
        }
    }

    @Override
    public boolean containsValue(_p2_ value)    {
        synchronized (sync) {
            return map.containsValue(value);
        }
    }

    @Override
    public void clear() {
        synchronized (sync) {
            map.clear();
        }
    }

    @Override
    public int getSize()    {
        synchronized (sync) {
            return map.getSize();
        }
    }

    @Override
    public void forEachKey(@NonNull _P1_Consumer_GK_ consumer)  {
        synchronized (sync){
            map.forEachKey(consumer);
        }
    }

    @Override
    public void forEachValue(@NonNull _P2_Consumer_GV_ consumer) {
        synchronized (sync){
            map.forEachValue(consumer);
        }
    }

    @Override
    public void forEachEntry(@NonNull _P1__P2_Consumer_GHI_ consumer) {
        synchronized (sync){
            map.forEachEntry(consumer);
        }
    }

    @Override
    public _P1_Iterator_GK_ keyIterator()   {
        synchronized (sync){
            return map.keyIterator();
        }
    }

    @Override
    public _P2_Iterator_GV_ valueIterator()   {
        synchronized (sync){
            return map.valueIterator();
        }
    }

    @Override
    public _P1__P2_Iterator_GHI_ entryIterator()   {
        synchronized (sync){
            return map.entryIterator();
        }
    }
}
