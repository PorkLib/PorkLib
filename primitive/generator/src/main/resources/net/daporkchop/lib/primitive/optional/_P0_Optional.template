_headers_

/**
 * A container object which may or may not contain a non-null value.
 * If a value is present, {@code isPresent()} will return {@code true} and
 * {@code get()} will return the value.
 *
 * <p>Additional methods that depend on the presence or absence of a contained
 * value are provided, such as {@link #orElse(java.lang.Object) orElse()}
 * (return a default value if value not present) and
 * {@link #ifPresent(java.util.function.Consumer) ifPresent()} (execute a block
 * of code if the value is present).
 *
 * <p>This is a <a href="../lang/doc-files/ValueBased.html">value-based</a>
 * class; use of identity-sensitive operations (including reference equality
 * ({@code ==}), identity hash code, or synchronization) on instances of
 * {@code _P0_Optional} may have unpredictable results and should be avoided.
 *
 * @since 1.8
 */
public class _P0_Optional_gH_ {
    /**
     * Common instance for {@code empty()}.
     */
    private static final _P0_Optional<%<?>%> EMPTY = new _P0_Optional<%<>%>();

    /**
     * If non-null, the value; if null, indicates no value is present
     */
    private final _p0_ value;

    /**
     * Constructs an empty instance.
     *
     * @implNote Generally only one empty instance, {@link Optional#EMPTY},
     * should exist per VM.
     */
    private _P0_Optional() {
        this.value = _P0E_;
    }

    /**
     * Returns an empty {@code _P0_Optional} instance.  No value is present for this
     * Optional.
     *
     * @apiNote Though it may be tempting to do so, avoid testing if an object
     * is empty by comparing with {@code ==} against instances returned by
     * {@code Option.empty()}. There is no guarantee that it is a singleton.
     * Instead, use {@link #isPresent()}.
     *
     * @param <T> Type of the non-existent value
     * @return an empty {@code _P0_Optional}
     */
<%    @SuppressWarnings("unchecked")
%>    public static <%<T>%> _P0_Optional<%<T>%> empty() {
        _P0_Optional<%<T>%> t = <%(_P0_Optional<T>) %>EMPTY;
        return t;
    }

    /**
     * Constructs an instance with the value present.
     *
     * @param value the non-null value to be present
     * @throws NullPointerException if value is null
     */
    private _P0_Optional(<%@NonNull %>_p0_ value) {
        this.value = value;
    }

    /**
     * Returns an {@code _P0_Optional} with the specified present non-null value.
     *
     * @param <T> the class of the value
     * @param value the value to be present, which must be non-null
     * @return an {@code _P0_Optional} with the value present
     * @throws NullPointerException if value is null
     */
    public static <%<T>%> _P0_Optional<%<T>%> of(_nGP0_<%T%> value) {
        return new _P0_Optional<%<>%>(value);
    }

    /**
     * Returns an {@code _P0_Optional} describing the specified value, if non-null,
     * otherwise returns an empty {@code Optional}.
     *
     * @param <T> the class of the value
     * @param value the possibly-null value to describe
     * @return an {@code _P0_Optional} with a present value if the specified value
     * is non-null, otherwise an empty {@code _P0_Optional}
     */
    public static <%<T>%> _P0_Optional<%<T>%> ofNullable(_nGP0_<%T%> value) {
        return value == _P0E_ ? empty() : of(value);
    }

    /**
     * If a value is present in this {@code _P0_Optional}, returns the value,
     * otherwise throws {@code NoSuchElementException}.
     *
     * @return the non-null value held by this {@code _P0_Optional}
     * @throws NoSuchElementException if there is no value present
     *
     * @see _P0_Optional#isPresent()
     */
    public _p0_ get() {
        if (!this.isPresent() /*value == _P0E_*/) {
            throw new NoSuchElementException("No value present");
        }
        return this.value;
    }

    /**
     * Return {@code true} if there is a value present, otherwise {@code false}.
     *
     * @return {@code true} if there is a value present, otherwise {@code false}
     */
    public boolean isPresent() {
        return this != EMPTY /*value != _P0E_*/;
    }

    /**
     * If a value is present, invoke the specified consumer with the value,
     * otherwise do nothing.
     *
     * @param consumer block to be executed if a value is present
     * @throws NullPointerException if value is present and {@code consumer} is
     * null
     */
    public void ifPresent(@NonNull _P0_Consumer_gSuper_ consumer) {
        if (this.isPresent()){
            consumer.accept(this.value);
        }
    }

    /**
     * If a value is present, and the value matches the given predicate,
     * return an {@code _P0_Optional} describing the value, otherwise return an
     * empty {@code _P0_Optional}.
     *
     * @param predicate a predicate to apply to the value, if present
     * @return an {@code _P0_Optional} describing the value of this {@code _P0_Optional}
     * if a value is present and the value matches the given predicate,
     * otherwise an empty {@code _P0_Optional}
     * @throws NullPointerException if the predicate is null
     */
    public _P0_Optional<%<_p0_>%> filter(@NonNull _P0_Predicate_gSuper_ predicate) {
        if (this.isPresent()){
            return this;
        } else {
            return predicate.test(this.value) ? this : empty();
        }
    }

_methods_
    /**
     * Return the value if present, otherwise return {@code other}.
     *
     * @param other the value to be returned if there is no value present, may
     * be null
     * @return the value, if present, otherwise {@code other}
     */
    public _p0_ orElse(_p0_ other) {
        return this.isPresent() /*value != _P0E_*/ ? this.value : other;
    }

    /**
     * Return the value if present, otherwise invoke {@code other} and return
     * the result of that invocation.
     *
     * @param other a {@code _P0_Supplier} whose result is returned if no value
     * is present
     * @return the value if present otherwise the result of {@code other.get()}
     * @throws NullPointerException if value is not present and {@code other} is
     * null
     */
    public _p0_ orElseGet(@NonNull _P0_Supplier_gExtends_ other) {
        return this.isPresent() /*value != _P0E_*/ ? this.value : other.get();
    }

    /**
     * Return the contained value, if present, otherwise throw an exception
     * to be created by the provided supplier.
     *
     * @apiNote A method reference to the exception constructor with an empty
     * argument list can be used as the supplier. For example,
     * {@code IllegalStateException::new}
     *
     * @param <X> Type of the exception to be thrown
     * @param exceptionSupplier The supplier which will return the exception to
     * be thrown
     * @return the present value
     * @throws X if there is no value present
     * @throws NullPointerException if no value is present and
     * {@code exceptionSupplier} is null
     */
    public <X extends Throwable> _p0_ orElseThrow(@NonNull ObjectSupplier<? extends X> exceptionSupplier) throws X {
        if (this.isPresent() /*value != null*/) {
            return this.value;
        } else {
            throw exceptionSupplier.get();
        }
    }

    /**
     * Indicates whether some other object is "equal to" this Optional. The
     * other object is considered equal if:
     * <ul>
     * <li>it is also an {@code Optional} and;
     * <li>both instances have no value present or;
     * <li>the present values are "equal to" each other via {@code equals()}.
     * </ul>
     *
     * @param obj an object to be tested for equality
     * @return {code true} if the other object is "equal to" this object
     * otherwise {@code false}
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof _P0_Optional)) {
            return false;
        }

        _P0_Optional<%<?>%> other = (_P0_Optional<%<?>%>) obj;
        return Objects.equals(this.value, other.value);
    }

    /**
     * Returns the hash code value of the present value, if any, or 0 (zero) if
     * no value is present.
     *
     * @return hash code value of the present value or 0 if no value is present
     */
    @Override
    public int hashCode() {
        return Objects.hashCode(this.value);
    }

    /**
     * Returns a non-empty string representation of this Optional suitable for
     * debugging. The exact presentation format is unspecified and may vary
     * between implementations and versions.
     *
     * @implSpec If a value is present the result must include its string
     * representation in the result. Empty and present Optionals must be
     * unambiguously differentiable.
     *
     * @return the string representation of this instance
     */
    @Override
    public String toString() {
        return this.isPresent() /*value != _P0E_*/
            ? String.format("Optional[%s]", value)
            : "Optional.empty";
    }
}