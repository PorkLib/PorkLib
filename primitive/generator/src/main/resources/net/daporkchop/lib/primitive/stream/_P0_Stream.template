_headers_
public interface _P0_Stream_gH_ {
    _P0_Stream_gH_ filter(_P0_Predicate_gSuper_ predicate);

_methods_

    _P0_Stream_gH_ distinct();

    _P0_Stream_gH_ sorted();

    _P0_Stream_gH_ sorted(_P0_Comparator_gSuper_ comparator);

    _P0_Stream_gH_ peek(_P0_Consumer_gSuper_ action);

    _P0_Stream_gH_ limit(long maxSize);

    _P0_Stream_gH_ skip(long n);

    void forEach(_P0_Consumer_gSuper_ action);

    void forEachOrdered(_P0_Consumer_gSuper_ action);

    _nameP0_[] toArray();
<%
    <T> T[] toArray(IntegerObjectFunction<T[]> generator);
%>

    _p0_ reduce(_p0_ identity, _P0_BinaryOperator_gH_ accumulator);

    _P0_Optional_gH_ reduce(_P0_BinaryOperator_gH_ accumulator);

     //TODO
     /*
    <R> R collect(Supplier<R> supplier,
                  BiConsumer<R, ? super T> accumulator,
                  BiConsumer<R, R> combiner);*/

     //TODO
     /*
    <R, A> R collect(Collector<? super T, A, R> collector);
    */

    _P0_Optional_gH_ min(_P0_Comparator_gSuper_ comparator);

    _P0_Optional_gH_ max(_P0_Comparator_gSuper_ comparator);

    long count();

    boolean anyMatch(_P0_Predicate_gSuper_ predicate);

    boolean allMatch(_P0_Predicate_gSuper_ predicate);

    boolean noneMatch(_P0_Predicate_gSuper_ predicate);

    _P0_Optional_gH_ findFirst();

    _P0_Optional_gH_ findAny();

    // Static factories

     //TODO
     /*
    public static <%<A> %>Builder<%<A>%> builder() {
        return new Streams.StreamBuilderImpl<%<>%>();
    }
    */

     //TODO
     /*
    public static <%<A> %>_P0_Stream<%<A>%> empty() {
        return StreamSupport.stream(Spliterators.<%<A>%>emptySpliterator(), false);
    }*/

     //TODO
     /*
    public static <%<A> %>_P0_Stream<%<A>%> of(_p0_ t) {
        return _P0_StreamSupport.stream(new Streams.StreamBuilderImpl<%<>%>(t), false);
    }
    */

     //TODO
     /*
    @SafeVarargs
    @SuppressWarnings("varargs") // Creating a stream from an array is safe
    public static <%<A> %>_P0_Stream<%<A>%> of(_P0_... values) {
        return Arrays.stream(values);
    }
    /*

     //TODO
     /*
    public static <%<A> %>_P0_Stream<%<A>%> iterate(final _p0_ seed, @NonNull final UnaryOperator<%<A>%> f) {
        final Iterator<%<A>%> iterator = new Iterator<%<A>%>() {
            <%@SuppressWarnings("unchecked")
            %>_p0_ t = <%(T) %>_P0_Streams.NONE;

            @Override
            public boolean hasNext() {
                return true;
            }

            @Override
            public _p0_ next() {
                return t = (t == Streams.NONE) ? seed : f.apply(t);
            }
        };
        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(
                iterator,
                Spliterator.ORDERED | Spliterator.IMMUTABLE), false);
    }
    */

     //TODO
     /*
    public static <%<A> %>_P0_Stream<%<A>%> generate(@NonNull _P0_Supplier<%<A>%> s) {
        return StreamSupport.stream(
                new StreamSpliterators.InfiniteSupplyingSpliterator.OfRef<>(Long.MAX_VALUE, s), false);
    }
    */

     //TODO
     /*
    public static <%<A> %>_P0_Stream<%<A>%> concat(@NonNull _P0_Stream_gExtends_ a, @NonNull _P0_Stream_gExtends_ b) {
        @SuppressWarnings("unchecked")
        Spliterator<T> split = new Streams.ConcatSpliterator.OfRef<>(
                (Spliterator<T>) a.spliterator(), (Spliterator<T>) b.spliterator());
        Stream<T> stream = StreamSupport.stream(split, a.isParallel() || b.isParallel());
        return stream.onClose(Streams.composedClose(a, b));
    }
    */

    public interface Builder<%<A>%> extends _P0_Consumer<%<A>%> {
        @Override
        void accept(_p0_ t);

        default Builder_gH_ add(_p0_ t) {
            this.accept(t);
            return this;
        }

        _P0_Stream_gH_ build();
    }
}