_headers_

/**
 * Represents an operation that accepts two input arguments and returns no
 * result.  This is the two-arity specialization of {@link _P0_Consumer}.
 * Unlike most other functional interfaces, {@code BiConsumer} is expected
 * to operate via side-effects.
 *
 * <p>This is a <a href="package-summary.html">functional interface</a>
 * whose functional method is {@link #accept(_nameP0_, _nameP1_)}.
 *
 * @param <A> the type of the first argument to the operation
 * @param <B> the type of the second argument to the operation
 *
 * @see _P0_Consumer
 * @since 1.8
 */
public interface _P0__P1_BiConsumer_gH_ {
    /**
     * Performs this operation on the given arguments.
     *
     * @param t the first input argument
     * @param u the second input argument
     */
    void accept(_p0_ t, _p1_ u);

    /**
     * Returns a composed {@code _P0__P1_BiConsumer} that performs, in sequence, this
     * operation followed by the {@code after} operation. If performing either
     * operation throws an exception, it is relayed to the caller of the
     * composed operation.  If performing this operation throws an exception,
     * the {@code after} operation will not be performed.
     *
     * @param after the operation to perform after this operation
     * @return a composed {@code _P0__P1_BiConsumer} that performs in sequence this
     * operation followed by the {@code after} operation
     * @throws NullPointerException if {@code after} is null
     */
    default _P0__P1_BiConsumer_gH_ andThen(@NonNull _P0__P1_BiConsumer_gSuper_ after) {
        return (l, r) -> {
            this.accept(l, r);
            after.accept(l, r);
        };
    }
}