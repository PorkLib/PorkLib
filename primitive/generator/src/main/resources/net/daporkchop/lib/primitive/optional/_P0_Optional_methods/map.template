    /**
     * If a value is present, apply the provided mapping function to it,
     * and if the result is non-null, return an {@code _P0_Optional} describing the
     * result.  Otherwise return an empty {@code _P0_Optional}.
     *
     * @apiNote This method supports post-processing on optional values, without
     * the need to explicitly check for a return status.  For example, the
     * following code traverses a stream of file names, selects one that has
     * not yet been processed, and then opens that file, returning an
     * {@code Optional<FileInputStream>}:
     *
     * <pre>{@code
     *     Optional<FileInputStream> fis =
     *         names.stream().filter(name -> !isProcessedYet(name))
     *                       .findFirst()
     *                       .map(name -> new FileInputStream(name));
     * }</pre>
     *
     * Here, {@code findFirst} returns an {@code _P0_Optional<String>}, and then
     * {@code map} returns an {@code Optional<FileInputStream>} for the desired
     * file if one exists.
     *
<method%     * @param <U> The type of the result of the mapping function
%>     * @param mapper a mapping function to apply to the value, if present
     * @return an {@code _P0_Optional} describing the result of applying a mapping
     * function to the value of this {@code _P0_Optional}, if a value is present,
     * otherwise an empty {@code _P0_Optional}
     * @throws NullPointerException if the mapping function is null
     */
    <method%@SuppressWarnings("unchecked")%>
    public <method%<U>%> _methodP0_Optional<%<U>%> map(@NonNull _P0__methodP0_Function mapper) {
        if (!this.isPresent()) {
            return _methodP0_Optional.empty();
        } else {
            return _methodP0_Optional.ofNullable(<method%(U) %>mapper.apply(this.value));
        }
    }

