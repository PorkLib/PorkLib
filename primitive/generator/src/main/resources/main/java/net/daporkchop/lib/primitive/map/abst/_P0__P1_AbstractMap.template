_headers_

public abstract class _P0__P1_AbstractMap_gH_ implements _P0__P1_Map_gH_ {
    protected _P0__P1_AbstractMap() {
    }

    // Query Operations

    public int size() {
        return this.entrySet().size();
    }

    public boolean isEmpty() {
        return this.size() == 0;
    }

    public boolean containsValue(_nameP1_ value) {
        ObjectIterator<_P0__P1_Map.Entry_gH_> i = this.entrySet().iterator();
        if (value==_P1E_) {
            while (i.hasNext()) {
                _P0__P1_Map.Entry_gH_ e = i.next();
                if (e.getValue()==_P1E_)
                    return true;
            }
        } else {
            while (i.hasNext()) {
                _P0__P1_Map.Entry_gH_ e = i.next();
                if (this.equals_P1_(value, e.getValue()))
                    return true;
            }
        }
        return false;
    }

    public boolean containsKey(_nameP0_ key) {
        ObjectIterator<_P0__P1_Map.Entry_gH_> i = this.entrySet().iterator();
        if (key==_P0E_) {
            while (i.hasNext()) {
                _P0__P1_Map.Entry_gH_ e = i.next();
                if (e.getKey()==_P0E_)
                    return true;
            }
        } else {
            while (i.hasNext()) {
                _P0__P1_Map.Entry_gH_ e = i.next();
                if (this.equals_P0_(key, e.getKey()))
                    return true;
            }
        }
        return false;
    }

    public _p1_ get(_nameP0_ key) {
        ObjectIterator<_P0__P1_Map.Entry_gH_> i = this.entrySet().iterator();
        if (key==_P0E_) {
            while (i.hasNext()) {
                _P0__P1_Map.Entry_gH_ e = i.next();
                if (e.getKey()==_P0E_)
                    return e.getValue();
            }
        } else {
            while (i.hasNext()) {
                _P0__P1_Map.Entry_gH_ e = i.next();
                if (this.equals_P0_(key, e.getKey()))
                    return e.getValue();
            }
        }
        return _P1E_;
    }

    // Modification Operations

    public _p1_ put(_p0_ key, _p1_ value) {
        throw new UnsupportedOperationException();
    }

    public _p1_ remove(_nameP0_ key) {
        ObjectIterator<_P0__P1_Map.Entry_gH_> i = this.entrySet().iterator();
        _P0__P1_Map.Entry_gH_ correctEntry = null;
        if (key==_P0E_) {
            while (correctEntry==null && i.hasNext()) {
                _P0__P1_Map.Entry_gH_ e = i.next();
                if (e.getKey()==_P0E_)
                    correctEntry = e;
            }
        } else {
            while (correctEntry==null && i.hasNext()) {
                _P0__P1_Map.Entry_gH_ e = i.next();
                if (this.equals_P0_(key, e.getKey()))
                    correctEntry = e;
            }
        }

        _p1_ oldValue = _P1E_;
        if (correctEntry != null) {
            oldValue = correctEntry.getValue();
            i.remove();
        }
        return oldValue;
    }

    // Bulk Operations

    @SuppressWarnings("unchecked")
    public void putAll(@NonNull _P0__P1_Map_gExtends_ m) {
        ObjectIterator<_P0__P1_Map.Entry> i = ((_P0__P1_Map) m).entrySet().iterator();
        while (i.hasNext()) {
            _P0__P1_Map.Entry e = i.next();
            this.put(_castP0_e.getKey(), _castP1_e.getValue());
        }
        /*for (_P0__P1_Map.Entry_gExtends_ e : m.entrySet())
            this.put(e.getKey(), e.getValue());*/
    }

    public void clear() {
        this.entrySet().clear();
    }

    // Views

    public transient _P0_Set_GP0_        keySet;
    public transient _P1_Collection_GP1_ values;

    public _P0_Set_GP0_ keySet() {
        _P0_Set_GP0_ ks = this.keySet;
        if (ks == null) {
            ks = new _P0_AbstractSet_GP0_() {
                public _P0_Iterator_GP0_ iterator() {
                    return new _P0_Iterator_GP0_() {
                        private ObjectIterator<_P0__P1_Map.Entry_gH_> i = entrySet().iterator();

                        public boolean hasNext() {
                            return i.hasNext();
                        }

                        public _p0_ next() {
                            return i.next().getKey();
                        }

                        public void remove() {
                            i.remove();
                        }
                    };
                }

                public int size() {
                    return _P0__P1_AbstractMap.this.size();
                }

                public boolean isEmpty() {
                    return _P0__P1_AbstractMap.this.isEmpty();
                }

                public void clear() {
                    _P0__P1_AbstractMap.this.clear();
                }

                public boolean contains(_nameP0_ k) {
                    return _P0__P1_AbstractMap.this.containsKey(k);
                }
            };
            keySet = ks;
        }
        return ks;
    }

    public _P1_Collection_GP1_ values() {
        _P1_Collection_GP1_ vals = this.values;
        if (vals == null) {
            vals = new _P1_AbstractCollection_GP1_() {
                public _P1_Iterator_GP1_ iterator() {
                    return new _P1_Iterator_GP1_() {
                        private ObjectIterator<_P0__P1_Map.Entry_gH_> i = entrySet().iterator();

                        public boolean hasNext() {
                            return i.hasNext();
                        }

                        public _p1_ next() {
                            return i.next().getValue();
                        }

                        public void remove() {
                            i.remove();
                        }
                    };
                }

                public int size() {
                    return _P0__P1_AbstractMap.this.size();
                }

                public boolean isEmpty() {
                    return _P0__P1_AbstractMap.this.isEmpty();
                }

                public void clear() {
                    _P0__P1_AbstractMap.this.clear();
                }

                public boolean contains(_nameP1_ v) {
                    return _P0__P1_AbstractMap.this.containsValue(v);
                }
            };
            values = vals;
        }
        return vals;
    }

    public abstract ObjectSet<_P0__P1_Map.Entry_gH_> entrySet();

    // Comparison and hashing

    @SuppressWarnings("unchecked")
    public boolean equals(Object o) {
        if (o == this){
            return true;
        }

        if (!(o instanceof _P0__P1_Map)){
            return false;
        }
        _P0__P1_Map_gH_ m = (_P0__P1_Map_gH_) o;
        if (m.size() != this.size()){
            return false;
        }

        try {
            ObjectIterator<_P0__P1_Map.Entry_gH_> i = this.entrySet().iterator();
            while (i.hasNext()) {
                _P0__P1_Map.Entry_gH_ e = i.next();
                _p0_ key = e.getKey();
                _p1_ value = e.getValue();
                if (value == _P1E_) {
                    if (!(m.get(key) == _P1E_ && m.containsKey(key))){
                        return false;
                    }
                } else {
                    if (!this.equals_P1_(value, m.get(key))){
                        return false;
                    }
                }
            }
        } catch (ClassCastException unused) {
            return false;
        } catch (NullPointerException unused) {
            return false;
        }

        return true;
    }

    public int hashCode() {
        int h = 0;
        ObjectIterator<_P0__P1_Map.Entry_gH_> i = this.entrySet().iterator();
        while (i.hasNext()){
            h += i.next().hashCode();
        }
        return h;
    }

    public String toString() {
        ObjectIterator<_P0__P1_Map.Entry_gH_> i = this.entrySet().iterator();
        if (!i.hasNext()){
            return "{}";
        }

        StringBuilder sb = new StringBuilder();
        sb.append('{');
        for (;;) {
            _P0__P1_Map.Entry_gH_ e = i.next();
            _p0_ key = e.getKey();
            _p1_ value = e.getValue();
            //sb.append(<%key   == this ? "(this _P0__P1_Map)" : %>key);
            //sb.append('=');
            //sb.append(<%value == this ? "(this _P0__P1_Map)" : %>value);
            sb.append(key);
            sb.append('=');
            sb.append(value);
            if (! i.hasNext()){
                return sb.append('}').toString();
            }
            sb.append(',').append(' ');
        }
    }

    protected Object clone() throws CloneNotSupportedException {
        _P0__P1_AbstractMap result = (_P0__P1_AbstractMap) super.clone();
        result.keySet = null;
        result.values = null;
        return result;
    }

    // Implementation Note: SimpleEntry and SimpleImmutableEntry
    // are distinct unrelated classes, even though they share
    // some code. Since you can't add or subtract final-ness
    // of a field in a subclass, they can't share representations,
    // and the amount of duplicated code is too small to warrant
    // exposing a common abstract class.

    public static class SimpleEntry_gH_ implements _P0__P1_Map.Entry_gH_, Serializable {
        private static final long serialVersionUID = -8499721149061103585L;

        private final _p0_ key;
        private _p1_ value;

        public SimpleEntry(_p0_ key, _p1_ value) {
            this.key   = key;
            this.value = value;
        }

        public SimpleEntry(_P0__P1_Map.Entry_gExtends_ entry) {
            this.key   = entry.getKey();
            this.value = entry.getValue();
        }

        public _p0_ getKey() {
            return this.key;
        }

        public _p1_ getValue() {
            return this.value;
        }

        public _p1_ setValue(_p1_ value) {
            _p1_ oldValue = this.value;
            this.value = value;
            return oldValue;
        }

        public boolean equals(Object o) {
            if (!(o instanceof _P0__P1_Map.Entry))
                return false;
            _P0__P1_Map.Entry e = (_P0__P1_Map.Entry) o;
            return this.equals_P0_(key, e.getKey()) && this.equals_P1_(value, e.getValue());
        }

        public int hashCode() {
            return (key   == _P0E_ ? 0 :   this.hash_P0_(key)) ^
                   (value == _P1E_ ? 0 : this.hash_P1_(value));
        }

        public String toString() {
            return key + "=" + value;
        }
    }

    public static class SimpleImmutableEntry_gH_ implements _P0__P1_Map.Entry_gH_, Serializable {
        private static final long serialVersionUID = 7138329143949025153L;

        private final _p0_ key;
        private final _p1_ value;

        public SimpleImmutableEntry(_p0_ key, _p1_ value) {
            this.key   = key;
            this.value = value;
        }

        public SimpleImmutableEntry(Entry_gExtends_ entry) {
            this.key   = entry.getKey();
            this.value = entry.getValue();
        }

        public _p0_ getKey() {
            return this.key;
        }

        public _p1_ getValue() {
            return this.value;
        }

        public _p1_ setValue(_p1_ value) {
            throw new UnsupportedOperationException();
        }

        public boolean equals(Object o) {
            if (!(o instanceof _P0__P1_Map.Entry)){
                return false;
            }
            _P0__P1_Map.Entry e = (_P0__P1_Map.Entry) o;
            return this.equals_P0_(this.key, e.getKey()) && this.equals_P1_(this.value, e.getValue());
        }

        public int hashCode() {
            return (key   == _P0E_ ? 0 :   this.hash_P0_(key)) ^
                   (value == _P1E_ ? 0 : this.hash_P1_(value));
        }

        public String toString() {
            return key + "=" + value;
        }
    }
}