_headers_

public abstract class _P0_AbstractCollection_gH_ implements _P0_Collection_gH_ {
    protected _P0_AbstractCollection() {
    }

    // Query Operations

    public abstract _P0_Iterator_gH_ iterator();

    public abstract int size();

    public boolean isEmpty() {
        return size() == 0;
    }

    public boolean contains(Object o) {
        _P0_Iterator_gH_ it = this.iterator();
        if (o==null) {
            while (it.hasNext()) {
                if (it.next() == _P0E_) {
                    return true;
                }
            }
        } else {
            while (it.hasNext()){
                if (o.equals(it.next()))    {
                    return true;
                }
            }
        }
        return false;
    }

    public _nameP0_[] toArray() {
        // Estimate size of array; be prepared to see more or fewer elements
        _nameP0_[] r = new _nameP0_[this.size()];
        _P0_Iterator_gH_ it = this.iterator();
        for (int i = 0; i < r.length; i++) {
            if (! it.hasNext()) // fewer elements than expected
                return Arrays.copyOf(r, i);
            r[i] = it.next();
        }
        return it.hasNext() ? this.finishToArray(r, it) : r;
    }
<%
    @SuppressWarnings("unchecked")
    public <T> T[] toArray(T[] a) {
        // Estimate size of array; be prepared to see more or fewer elements
        int size = this.size();
        T[] r = a.length >= size ? a :
                  (T[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(), size);
        _P0_Iterator_gH_ it = this.iterator();

        for (int i = 0; i < r.length; i++) {
            if (! it.hasNext()) { // fewer elements than expected
                if (a == r) {
                    r[i] = null; // null-terminate
                } else if (a.length < i) {
                    return Arrays.copyOf(r, i);
                } else {
                    System.arraycopy(r, 0, a, 0, i);
                    if (a.length > i) {
                        a[i] = null;
                    }
                }
                return a;
            }
            r[i] = (T) it.next();
        }
        // more elements than expected
        return it.hasNext() ? (T[]) this.finishToArray(r, it) : r;
    }
%>

    private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;

    @SuppressWarnings("unchecked")
    private static _nameP0_[] finishToArray(_nameP0_[] r, _P0_Iterator<%<?>%> it) {
        int i = r.length;
        while (it.hasNext()) {
            int cap = r.length;
            if (i == cap) {
                int newCap = cap + (cap >> 1) + 1;
                // overflow-conscious code
                if (newCap - MAX_ARRAY_SIZE > 0)
                    newCap = hugeCapacity(cap + 1);
                r = Arrays.copyOf(r, newCap);
            }
            r[i++] = it.next();
        }
        // trim if overallocated
        return (i == r.length) ? r : Arrays.copyOf(r, i);
    }

    private static int hugeCapacity(int minCapacity) {
        if (minCapacity < 0) // overflow
            throw new OutOfMemoryError
                ("Required array size too large");
        return (minCapacity > MAX_ARRAY_SIZE) ?
            Integer.MAX_VALUE :
            MAX_ARRAY_SIZE;
    }

    // Modification Operations

    public boolean add(_p0_ e) {
        throw new UnsupportedOperationException();
    }

    public boolean remove(_nameP0_ o) {
        _P0_Iterator_gH_ it = this.iterator();
        if (o==_P0E_) {
            while (it.hasNext()) {
                if (it.next()==_P0E_) {
                    it.remove();
                    return true;
                }
            }
        } else {
            while (it.hasNext()) {
                if (this.equals_P0_(o, it.next())) {
                    it.remove();
                    return true;
                }
            }
        }
        return false;
    }


    // Bulk Operations

    public boolean containsAll(@NonNull _P0_Collection c) {
        _P0_Iterator i = c.iterator();
        while (i.hasNext()) {
            if (!this.contains(i.next()))   {
                return false;
            }
        }
        return true;
        /*for (_nameP0_ e : c)
            if (!this.contains(e))
                return false;
        return true;*/
    }

    public boolean addAll(@NonNull _P0_Collection_gExtends_ c) {
        _P0_Iterator_gExtends_ i = c.iterator();
        boolean modified = false;
        while (i.hasNext()) {
            if (this.add(i.next())) {
                modified = true;
            }
        }
        /*for (E e : c)
            if (add(e))
                modified = true;*/
        return modified;
    }

<%    @SuppressWarnings("unchecked")
%>    public boolean removeAll(@NonNull _P0_Collection c) {
        boolean modified = false;
        _P0_Iterator it = this.iterator();
        while (it.hasNext()) {
            if (c.contains(it.next())) {
                it.remove();
                modified = true;
            }
        }
        return modified;
    }

<%    @SuppressWarnings("unchecked")
%>    public boolean retainAll(@NonNull _P0_Collection c) {
        boolean modified = false;
        _P0_Iterator_gH_ it = this.iterator();
        while (it.hasNext()) {
            if (!c.contains(it.next())) {
                it.remove();
                modified = true;
            }
        }
        return modified;
    }

    public void clear() {
        _P0_Iterator_gH_ it = this.iterator();
        while (it.hasNext()) {
            it.next();
            it.remove();
        }
    }

    //  String conversion
    public String toString() {
        _P0_Iterator_gH_ it = this.iterator();
        if (!it.hasNext())
            return "[]";

        StringBuilder sb = new StringBuilder();
        sb.append('[');
        for (;;) {
            _p0_ e = it.next();
            sb.append(<%e == this ? "(this _P0_Collection)" : %>e);
            if (!it.hasNext())
                return sb.append(']').toString();
            sb.append(',').append(' ');
        }
    }
}