_headers_

public class _P0__P1_HashMap_gH_ extends _P0__P1_AbstractMap_gH_ implements _P0__P1_Map_gH_, Cloneable, Serializable {
    private static final long serialVersionUID = 362498820763181265L;

    static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16

    static final int MAXIMUM_CAPACITY = 1 << 30;

    static final float DEFAULT_LOAD_FACTOR = 0.75f;

    static final int TREEIFY_THRESHOLD = 8;

    static final int UNTREEIFY_THRESHOLD = 6;

    static final int MIN_TREEIFY_CAPACITY = 64;

    public static class Node_gH_ implements _P0__P1_Map.Entry_gH_ {
        public final int hash;
        public final _p0_ key;
        public _p1_ value;
        public Node_gH_ next;

        public Node(int hash, _p0_ key, _p1_ value, Node_gH_ next) {
            this.hash = hash;
            this.key = key;
            this.value = value;
            this.next = next;
        }

        public final _p0_ getKey()        { return key; }
        public final _p1_ getValue()      { return value; }
        public final String toString() { return key + "=" + value; }

        public final int hashCode() {
            return this.hash_P0_(key) ^ this.hash_P1_(value);
        }

        public final _p1_ setValue(_p1_ newValue) {
            _p1_ oldValue = value;
            value = newValue;
            return oldValue;
        }

        public final boolean equals(Object o) {
            if (o == this)
                return true;
            if (o instanceof _P0__P1_Map.Entry) {
                _P0__P1_Map.Entry e = (_P0__P1_Map.Entry) o;
                if (this.equals_P0_(key, e.getKey()) &&
                    this.equals_P1_(value, e.getValue()))
                    return true;
            }
            return false;
        }
    }

    /* ---------------- Static utilities -------------- */

    static Class<?> comparableClassFor(_nameP0_ x) {
        return null;
    }

    @SuppressWarnings({"rawtypes","unchecked"}) // for cast to Comparable
    static int compareComparables(<%Class<?> kc, %>_nameP0_ k, _nameP0_ x) {
        return <%(x == null || x.getClass() != kc ? 0 : ((Comparable) k).compareTo(x));//%>_P0_.compare(k, x);
    }

    static final int tableSizeFor(int cap) {
        int n = cap - 1;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
    }

    /* ---------------- Fields -------------- */

    public transient Node_gH_[] table;

    public transient ObjectSet<_P0__P1_Map.Entry_gH_> entrySet;

    public transient int size;

    public transient int modCount;

    public int threshold;

    public final float loadFactor;

    /* ---------------- Public operations -------------- */

    public _P0__P1_HashMap(int initialCapacity, float loadFactor) {
        if (initialCapacity < 0)
            throw new IllegalArgumentException("Illegal initial capacity: " +
                                               initialCapacity);
        if (initialCapacity > MAXIMUM_CAPACITY)
            initialCapacity = MAXIMUM_CAPACITY;
        if (loadFactor <= 0 || Float.isNaN(loadFactor))
            throw new IllegalArgumentException("Illegal load factor: " +
                                               loadFactor);
        this.loadFactor = loadFactor;
        this.threshold = tableSizeFor(initialCapacity);
    }

    public _P0__P1_HashMap(int initialCapacity) {
        this(initialCapacity, DEFAULT_LOAD_FACTOR);
    }

    public _P0__P1_HashMap() {
        this.loadFactor = DEFAULT_LOAD_FACTOR;
    }

    public _P0__P1_HashMap(_P0__P1_Map_gExtends_ m) {
        this.loadFactor = DEFAULT_LOAD_FACTOR;
        putMapEntries(m, false);
    }

    @SuppressWarnings("unchecked")
    public final void putMapEntries(_P0__P1_Map_gExtends_ m, boolean evict) {
        int s = m.size();
        if (s > 0) {
            if (table == null) { // pre-size
                float ft = ((float)s / loadFactor) + 1.0F;
                int t = ((ft < (float)MAXIMUM_CAPACITY) ?
                         (int)ft : MAXIMUM_CAPACITY);
                if (t > threshold)
                    threshold = tableSizeFor(t);
            }
            else if (s > threshold)
                resize();
            ObjectIterator i = m.entrySet().iterator();
            while (i.hasNext()) {
                _P0__P1_Map.Entry_gExtends_ e = (_P0__P1_Map.Entry_gExtends_) i.next();
                _p0_ key = e.getKey();
                _p1_ value = e.getValue();
                putVal(hash(key), key, value, false, evict);
            }
        }
    }

    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public _p1_ get(_nameP0_ key) {
        Node_gH_ e;
        return (e = getNode(hash(key), key)) == null ? _P1E_ : e.value;
    }

    public final Node_gH_ getNode(int hash, _nameP0_ key) {
        Node_gH_[] tab; Node_gH_ first, e; int n; _p0_ k;
        if ((tab = table) != null && (n = tab.length) > 0 &&
            (first = tab[(n - 1) & hash]) != null) {
            if (first.hash == hash && // always check first node
                ((k = first.key) == key || this.equals(key, k)/*(key != null && key.equals(k))*/))
                return first;
            if ((e = first.next) != null) {
                if (first instanceof TreeNode)
                    return ((TreeNode_gH_)first).getTreeNode(hash, key);
                do {
                    if (e.hash == hash &&
                        ((k = e.key) == key || (this.equals(key, k)/*key != null && key.equals(k))*/)))
                        return e;
                } while ((e = e.next) != null);
            }
        }
        return null;
    }

    public boolean containsKey(_nameP0_ key) {
        return getNode(hash(key), key) != null;
    }

    public _p1_ put(_p0_ key, _p1_ value) {
        return putVal(hash(key), key, value, false, true);
    }

    public final _p1_ putVal(int hash, _p0_ key, _p1_ value, boolean onlyIfAbsent,
                   boolean evict) {
        Node_gH_[] tab; Node_gH_ p; int n, i;
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
        if ((p = tab[i = (n - 1) & hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else {
            Node_gH_ e; _p0_ k;
            if (p.hash == hash &&
                ((k = p.key) == key || this.equals(key, k)/*(key != null && key.equals(k))*/))
                e = p;
            else if (p instanceof TreeNode)
                e = ((TreeNode_gH_) p).putTreeVal(this, tab, hash, key, value);
            else {
                for (int binCount = 0; ; ++binCount) {
                    if ((e = p.next) == null) {
                        p.next = newNode(hash, key, value, null);
                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            treeifyBin(tab, hash);
                        break;
                    }
                    if (e.hash == hash &&
                        ((k = e.key) == key || (this.equals(key, k)/*key != null && key.equals(k))*/)))
                        break;
                    p = e;
                }
            }
            if (e != null) { // existing mapping for key
                _p1_ oldValue = e.value;
                if (!onlyIfAbsent || oldValue == _P1E_)
                    e.value = value;
                afterNodeAccess(e);
                return oldValue;
            }
        }
        ++modCount;
        if (++size > threshold)
            resize();
        afterNodeInsertion(evict);
        return _P1E_;
    }

    public final Node_gH_[] resize() {
        Node_gH_[] oldTab = table;
        int oldCap = (oldTab == null) ? 0 : oldTab.length;
        int oldThr = threshold;
        int newCap, newThr = 0;
        if (oldCap > 0) {
            if (oldCap >= MAXIMUM_CAPACITY) {
                threshold = Integer.MAX_VALUE;
                return oldTab;
            }
            else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&
                     oldCap >= DEFAULT_INITIAL_CAPACITY)
                newThr = oldThr << 1; // double threshold
        }
        else if (oldThr > 0) // initial capacity was placed in threshold
            newCap = oldThr;
        else {               // zero initial threshold signifies using defaults
            newCap = DEFAULT_INITIAL_CAPACITY;
            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
        }
        if (newThr == 0) {
            float ft = (float)newCap * loadFactor;
            newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?
                      (int)ft : Integer.MAX_VALUE);
        }
        threshold = newThr;
        @SuppressWarnings({"rawtypes","unchecked"})
            Node_gH_[] newTab = (Node_gH_[]) new Node[newCap];
        table = newTab;
        if (oldTab != null) {
            for (int j = 0; j < oldCap; ++j) {
                Node_gH_ e;
                if ((e = oldTab[j]) != null) {
                    oldTab[j] = null;
                    if (e.next == null)
                        newTab[e.hash & (newCap - 1)] = e;
                    else if (e instanceof TreeNode)
                        ((TreeNode_gH_) e).split(this, newTab, j, oldCap);
                    else { // preserve order
                        Node_gH_ loHead = null, loTail = null;
                        Node_gH_ hiHead = null, hiTail = null;
                        Node_gH_ next;
                        do {
                            next = e.next;
                            if ((e.hash & oldCap) == 0) {
                                if (loTail == null)
                                    loHead = e;
                                else
                                    loTail.next = e;
                                loTail = e;
                            }
                            else {
                                if (hiTail == null)
                                    hiHead = e;
                                else
                                    hiTail.next = e;
                                hiTail = e;
                            }
                        } while ((e = next) != null);
                        if (loTail != null) {
                            loTail.next = null;
                            newTab[j] = loHead;
                        }
                        if (hiTail != null) {
                            hiTail.next = null;
                            newTab[j + oldCap] = hiHead;
                        }
                    }
                }
            }
        }
        return newTab;
    }

    public final void treeifyBin(Node_gH_[] tab, int hash) {
        int n, index; Node_gH_ e;
        if (tab == null || (n = tab.length) < MIN_TREEIFY_CAPACITY)
            resize();
        else if ((e = tab[index = (n - 1) & hash]) != null) {
            TreeNode_gH_ hd = null, tl = null;
            do {
                TreeNode_gH_ p = replacementTreeNode(e, null);
                if (tl == null)
                    hd = p;
                else {
                    p.prev = tl;
                    tl.next = p;
                }
                tl = p;
            } while ((e = e.next) != null);
            if ((tab[index] = hd) != null)
                hd.treeify(tab);
        }
    }

    public void putAll(_P0__P1_Map_gExtends_ m) {
        putMapEntries(m, true);
    }

    public _p1_ remove(_nameP0_ key) {
        Node_gH_ e;
        return (e = removeNode(hash(key), key, _P1E_, false, true)) == null ? null : e.value;
    }

    public final Node_gH_ removeNode(int hash, _nameP0_ key, _nameP1_ value,
                               boolean matchValue, boolean movable) {
        Node_gH_[] tab; Node_gH_ p; int n, index;
        if ((tab = table) != null && (n = tab.length) > 0 &&
            (p = tab[index = (n - 1) & hash]) != null) {
            Node_gH_ node = null, e; _p0_ k; _p1_ v;
            if (p.hash == hash &&
                ((k = p.key) == key || this.equals(key, k)/*(key != null && key.equals(k))*/))
                node = p;
            else if ((e = p.next) != null) {
                if (p instanceof TreeNode)
                    node = ((TreeNode_gH_) p).getTreeNode(hash, key);
                else {
                    do {
                        if (e.hash == hash &&
                            ((k = e.key) == key ||
                            this.equals(key, k)/*(key != null && key.equals(k))*/)) {
                            node = e;
                            break;
                        }
                        p = e;
                    } while ((e = e.next) != null);
                }
            }
            if (node != null && (!matchValue || (v = node.value) == value ||
                                 this.equals(value, v)/*(value != null && value.equals(v))*/)) {
                if (node instanceof TreeNode)
                    ((TreeNode_gH_) node).removeTreeNode(this, tab, movable);
                else if (node == p)
                    tab[index] = node.next;
                else
                    p.next = node.next;
                ++modCount;
                --size;
                afterNodeRemoval(node);
                return node;
            }
        }
        return null;
    }

    public void clear() {
        Node_gH_[] tab;
        modCount++;
        if ((tab = table) != null && size > 0) {
            size = 0;
            for (int i = 0; i < tab.length; ++i)
                tab[i] = null;
        }
    }

    public boolean containsValue(_nameP1_ value) {
        Node_gH_[] tab; _p1_ v;
        if ((tab = table) != null && size > 0) {
            for (int i = 0; i < tab.length; ++i) {
                for (Node_gH_ e = tab[i]; e != null; e = e.next) {
                    if ((v = e.value) == value ||
                        this.equals(value, v)/*(value != null && value.equals(v))*/)
                        return true;
                }
            }
        }
        return false;
    }

    public _P0_Set_GP0_ keySet() {
        _P0_Set_GP0_ ks = keySet;
        if (ks == null) {
            ks = new KeySet();
            keySet = ks;
        }
        return ks;
    }

    final class KeySet extends _P0_AbstractSet_GP0_ {
        public final int size()                 { return size; }
        public final void clear()               { _P0__P1_HashMap.this.clear(); }
        public final _P0_Iterator_GP0_ iterator()     { return new KeyIterator(); }
        public final boolean contains(_nameP0_ o) { return containsKey(o); }
        public final boolean remove(_nameP0_ key) {
            return removeNode(hash(key), key, _P1E_, false, true) != null;
        }
        public final _P0_Spliterator_GP0_ spliterator() {
            return new KeySpliterator(_P0__P1_HashMap.this, 0, -1, 0, 0);
        }
        public final void forEach(_P0_Consumer_GsuperP0_ action) {
            Node_gH_[] tab;
            if (action == null)
                throw new NullPointerException();
            if (size > 0 && (tab = table) != null) {
                int mc = modCount;
                for (int i = 0; i < tab.length; ++i) {
                    for (Node_gH_ e = tab[i]; e != null; e = e.next)
                        action.accept(e.key);
                }
                if (modCount != mc)
                    throw new ConcurrentModificationException();
            }
        }
    }

    public _P1_Collection_GP1_ values() {
        _P1_Collection_GP1_ vs = values;
        if (vs == null) {
            vs = new Values();
            values = vs;
        }
        return vs;
    }

    final class Values extends _P1_AbstractCollection_GP1_ {
        public final int size()                 { return size; }
        public final void clear()               { _P0__P1_HashMap.this.clear(); }
        public final _P1_Iterator_GP1_ iterator()     { return new ValueIterator(); }
        public final boolean contains(_nameP1_ o) { return containsValue(o); }
        public final _P1_Spliterator_GP1_ spliterator() {
            return new ValueSpliterator(_P0__P1_HashMap.this, 0, -1, 0, 0);
        }
        public final void forEach(_P1_Consumer_GsuperP1_ action) {
            Node_gH_[] tab;
            if (action == null)
                throw new NullPointerException();
            if (size > 0 && (tab = table) != null) {
                int mc = modCount;
                for (int i = 0; i < tab.length; ++i) {
                    for (Node_gH_ e = tab[i]; e != null; e = e.next)
                        action.accept(e.value);
                }
                if (modCount != mc)
                    throw new ConcurrentModificationException();
            }
        }
    }

    public ObjectSet<_P0__P1_Map.Entry_gH_> entrySet() {
        ObjectSet<_P0__P1_Map.Entry_gH_> es;
        return (es = entrySet) == null ? (entrySet = new EntrySet()) : es;
    }

    final class EntrySet extends ObjectAbstractSet<_P0__P1_Map.Entry_gH_> {
        public final int size()                 { return size; }
        public final void clear()               { _P0__P1_HashMap.this.clear(); }
        public final ObjectIterator<_P0__P1_Map.Entry_gH_> iterator() {
            return new EntryIterator();
        }
        public final boolean contains(Object o) {
            if (!(o instanceof _P0__P1_Map.Entry))
                return false;
            _P0__P1_Map.Entry e = (_P0__P1_Map.Entry) o;
            _nameP0_ key = e.getKey();
            Node_gH_ candidate = getNode(hash(key), key);
            return candidate != null && candidate.equals(e);
        }
        public final boolean remove(Object o) {
            if (o instanceof _P0__P1_Map.Entry) {
                _P0__P1_Map.Entry e = (_P0__P1_Map.Entry) o;
                _nameP0_ key = e.getKey();
                _nameP1_ value = e.getValue();
                return removeNode(hash(key), key, value, true, true) != null;
            }
            return false;
        }
        public final ObjectSpliterator<_P0__P1_Map.Entry_gH_> spliterator() {
            return new EntrySpliterator(_P0__P1_HashMap.this, 0, -1, 0, 0);
        }
        public final void forEach(ObjectConsumer<? super _P0__P1_Map.Entry_gH_> action) {
            Node_gH_[] tab;
            if (action == null)
                throw new NullPointerException();
            if (size > 0 && (tab = table) != null) {
                int mc = modCount;
                for (int i = 0; i < tab.length; ++i) {
                    for (Node_gH_ e = tab[i]; e != null; e = e.next)
                        action.accept(e);
                }
                if (modCount != mc)
                    throw new ConcurrentModificationException();
            }
        }
    }

    // Overrides of JDK8 Map extension methods

    @Override
    public _p1_ getOrDefault(_nameP0_ key, _p1_ defaultValue) {
        Node_gH_ e;
        return (e = getNode(hash(key), key)) == null ? defaultValue : e.value;
    }

    @Override
    public _p1_ putIfAbsent(_p0_ key, _p1_ value) {
        return putVal(hash(key), key, value, true, true);
    }

    @Override
    public boolean remove(_nameP0_ key, _nameP1_ value) {
        return removeNode(hash(key), key, value, true, true) != null;
    }

    @Override
    public boolean replace(_p0_ key, _p1_ oldValue, _p1_ newValue) {
        Node_gH_ e; _p1_ v;
        if ((e = getNode(hash(key), key)) != null &&
            ((v = e.value) == oldValue || this.equals(v, oldValue)/*(v != null && v.equals(oldValue))*/)) {
            e.value = newValue;
            afterNodeAccess(e);
            return true;
        }
        return false;
    }

    @Override
    public _p1_ replace(_p0_ key, _p1_ value) {
        Node_gH_ e;
        if ((e = getNode(hash(key), key)) != null) {
            _p1_ oldValue = e.value;
            e.value = value;
            afterNodeAccess(e);
            return oldValue;
        }
        return _P1E_;
    }

    //TODO: add clause in generator for this parameter
    /*@Override
    public _p1_ computeIfAbsent(_p0_ key,
                             _P0__P1_Function_gSuper_ mappingFunction) {
        if (mappingFunction == null)
            throw new NullPointerException();
        int hash = hash(key);
        Node_gH_[] tab; Node_gH_ first; int n, i;
        int binCount = 0;
        TreeNode_gH_ t = null;
        Node_gH_ old = null;
        if (size > threshold || (tab = table) == null ||
            (n = tab.length) == 0)
            n = (tab = resize()).length;
        if ((first = tab[i = (n - 1) & hash]) != null) {
            if (first instanceof TreeNode)
                old = (t = (TreeNode_gH_) first).getTreeNode(hash, key);
            else {
                Node_gH_ e = first; _p0_ k;
                do {
                    if (e.hash == hash &&
                        ((k = e.key) == key || this.equals(key, k)/*(key != null && key.equals(k))* /)) {
                        old = e;
                        break;
                    }
                    ++binCount;
                } while ((e = e.next) != null);
            }
            _p1_ oldValue;
            if (old != null && (oldValue = old.value) != null) {
                afterNodeAccess(old);
                return oldValue;
            }
        }
        _p1_ v = mappingFunction.apply(key);
        if (v == null) {
            return null;
        } else if (old != null) {
            old.value = v;
            afterNodeAccess(old);
            return v;
        }
        else if (t != null)
            t.putTreeVal(this, tab, hash, key, v);
        else {
            tab[i] = newNode(hash, key, v, first);
            if (binCount >= TREEIFY_THRESHOLD - 1)
                treeifyBin(tab, hash);
        }
        ++modCount;
        ++size;
        afterNodeInsertion(true);
        return v;
    }*/

    //TODO: add clause in generator for this parameter
    /*public _p1_ computeIfPresent(_p0_ key,
                              _P0__P1__P1_BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
        if (remappingFunction == null)
            throw new NullPointerException();
        Node<K,V> e; V oldValue;
        int hash = hash(key);
        if ((e = getNode(hash, key)) != null &&
            (oldValue = e.value) != null) {
            V v = remappingFunction.apply(key, oldValue);
            if (v != null) {
                e.value = v;
                afterNodeAccess(e);
                return v;
            }
            else
                removeNode(hash, key, null, false, true);
        }
        return null;
    }*/

    //TODO: add clause in generator for this parameter
    /*@Override
    public _p1_ compute(_p0_ key,
                     BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
        if (remappingFunction == null)
            throw new NullPointerException();
        int hash = hash(key);
        Node<K,V>[] tab; Node<K,V> first; int n, i;
        int binCount = 0;
        TreeNode<K,V> t = null;
        Node<K,V> old = null;
        if (size > threshold || (tab = table) == null ||
            (n = tab.length) == 0)
            n = (tab = resize()).length;
        if ((first = tab[i = (n - 1) & hash]) != null) {
            if (first instanceof TreeNode)
                old = (t = (TreeNode<K,V>)first).getTreeNode(hash, key);
            else {
                Node<K,V> e = first; K k;
                do {
                    if (e.hash == hash &&
                        ((k = e.key) == key || (key != null && key.equals(k)))) {
                        old = e;
                        break;
                    }
                    ++binCount;
                } while ((e = e.next) != null);
            }
        }
        V oldValue = (old == null) ? null : old.value;
        V v = remappingFunction.apply(key, oldValue);
        if (old != null) {
            if (v != null) {
                old.value = v;
                afterNodeAccess(old);
            }
            else
                removeNode(hash, key, null, false, true);
        }
        else if (v != null) {
            if (t != null)
                t.putTreeVal(this, tab, hash, key, v);
            else {
                tab[i] = newNode(hash, key, v, first);
                if (binCount >= TREEIFY_THRESHOLD - 1)
                    treeifyBin(tab, hash);
            }
            ++modCount;
            ++size;
            afterNodeInsertion(true);
        }
        return v;
    }*/

    //TODO: add clause in generator for this parameter
    /*@Override
    public V merge(K key, V value,
                   BiFunction<? super V, ? super V, ? extends V> remappingFunction) {
        if (value == null)
            throw new NullPointerException();
        if (remappingFunction == null)
            throw new NullPointerException();
        int hash = hash(key);
        Node<K,V>[] tab; Node<K,V> first; int n, i;
        int binCount = 0;
        TreeNode<K,V> t = null;
        Node<K,V> old = null;
        if (size > threshold || (tab = table) == null ||
            (n = tab.length) == 0)
            n = (tab = resize()).length;
        if ((first = tab[i = (n - 1) & hash]) != null) {
            if (first instanceof TreeNode)
                old = (t = (TreeNode<K,V>)first).getTreeNode(hash, key);
            else {
                Node<K,V> e = first; K k;
                do {
                    if (e.hash == hash &&
                        ((k = e.key) == key || (key != null && key.equals(k)))) {
                        old = e;
                        break;
                    }
                    ++binCount;
                } while ((e = e.next) != null);
            }
        }
        if (old != null) {
            V v;
            if (old.value != null)
                v = remappingFunction.apply(old.value, value);
            else
                v = value;
            if (v != null) {
                old.value = v;
                afterNodeAccess(old);
            }
            else
                removeNode(hash, key, null, false, true);
            return v;
        }
        if (value != null) {
            if (t != null)
                t.putTreeVal(this, tab, hash, key, value);
            else {
                tab[i] = newNode(hash, key, value, first);
                if (binCount >= TREEIFY_THRESHOLD - 1)
                    treeifyBin(tab, hash);
            }
            ++modCount;
            ++size;
            afterNodeInsertion(true);
        }
        return value;
    }*/

    @Override
    public void forEach(_P0__P1_BiConsumer_gSuper_ action) {
        Node_gH_[] tab;
        if (action == null)
            throw new NullPointerException();
        if (size > 0 && (tab = table) != null) {
            int mc = modCount;
            for (int i = 0; i < tab.length; ++i) {
                for (Node_gH_ e = tab[i]; e != null; e = e.next)
                    action.accept(e.key, e.value);
            }
            if (modCount != mc)
                throw new ConcurrentModificationException();
        }
    }

    //TODO: add clause in generator for this parameter
    /*@Override
    public void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {
        Node<K,V>[] tab;
        if (function == null)
            throw new NullPointerException();
        if (size > 0 && (tab = table) != null) {
            int mc = modCount;
            for (int i = 0; i < tab.length; ++i) {
                for (Node<K,V> e = tab[i]; e != null; e = e.next) {
                    e.value = function.apply(e.key, e.value);
                }
            }
            if (modCount != mc)
                throw new ConcurrentModificationException();
        }
    }*/

    /* ------------------------------------------------------------ */
    // Cloning and serialization

    @SuppressWarnings("unchecked")
    @Override
    public Object clone() {
        _P0__P1_HashMap_gH_ result;
        try {
            result = (_P0__P1_HashMap_gH_) super.clone();
        } catch (CloneNotSupportedException e) {
            // this shouldn't happen, since we are Cloneable
            throw new InternalError(e);
        }
        result.reinitialize();
        result.putMapEntries(this, false);
        return result;
    }

    // These methods are also used when serializing HashSets
    final float loadFactor() { return loadFactor; }
    final int capacity() {
        return (table != null) ? table.length :
            (threshold > 0) ? threshold :
            DEFAULT_INITIAL_CAPACITY;
    }

    private void writeObject(java.io.ObjectOutputStream s)
        throws IOException {
        int buckets = capacity();
        // Write out the threshold, loadfactor, and any hidden stuff
        s.defaultWriteObject();
        s.writeInt(buckets);
        s.writeInt(size);
        internalWriteEntries(s);
    }

    private void readObject(java.io.ObjectInputStream s)
        throws IOException, ClassNotFoundException {
        // Read in the threshold (ignored), loadfactor, and any hidden stuff
        s.defaultReadObject();
        reinitialize();
        if (loadFactor <= 0 || Float.isNaN(loadFactor))
            throw new InvalidObjectException("Illegal load factor: " +
                                             loadFactor);
        s.readInt();                // Read and ignore number of buckets
        int mappings = s.readInt(); // Read number of mappings (size)
        if (mappings < 0)
            throw new InvalidObjectException("Illegal mappings count: " +
                                             mappings);
        else if (mappings > 0) { // (if zero, use defaults)
            // Size the table using given load factor only if within
            // range of 0.25...4.0
            float lf = Math.min(Math.max(0.25f, loadFactor), 4.0f);
            float fc = (float)mappings / lf + 1.0f;
            int cap = ((fc < DEFAULT_INITIAL_CAPACITY) ?
                       DEFAULT_INITIAL_CAPACITY :
                       (fc >= MAXIMUM_CAPACITY) ?
                       MAXIMUM_CAPACITY :
                       tableSizeFor((int)fc));
            float ft = (float)cap * lf;
            threshold = ((cap < MAXIMUM_CAPACITY && ft < MAXIMUM_CAPACITY) ?
                         (int)ft : Integer.MAX_VALUE);
            @SuppressWarnings({"rawtypes","unchecked"})
                Node_gH_[] tab = (Node_gH_[])new Node[cap];
            table = tab;

            // Read the keys and values, and put the mappings in the HashMap
            for (int i = 0; i < mappings; i++) {
                @SuppressWarnings("unchecked")
                    _p0_ key = (_p0_) s._readP0_();
                @SuppressWarnings("unchecked")
                    _p1_ value = (_p1_) s._readP1_();
                putVal(hash(key), key, value, false, false);
            }
        }
    }

    /* ------------------------------------------------------------ */
    // iterators

    abstract class HashIterator {
        Node_gH_ next;        // next entry to return
        Node_gH_ current;     // current entry
        int expectedModCount;  // for fast-fail
        int index;             // current slot

        HashIterator() {
            expectedModCount = modCount;
            Node_gH_[] t = table;
            current = next = null;
            index = 0;
            if (t != null && size > 0) { // advance to first entry
                do {} while (index < t.length && (next = t[index++]) == null);
            }
        }

        public final boolean hasNext() {
            return next != null;
        }

        final Node_gH_ nextNode() {
            Node_gH_[] t;
            Node_gH_ e = next;
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
            if (e == null)
                throw new NoSuchElementException();
            if ((next = (current = e).next) == null && (t = table) != null) {
                do {} while (index < t.length && (next = t[index++]) == null);
            }
            return e;
        }

        public final void remove() {
            Node_gH_ p = current;
            if (p == null)
                throw new IllegalStateException();
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
            current = null;
            _p0_ key = p.key;
            removeNode(hash(key), key, _P1E_, false, false);
            expectedModCount = modCount;
        }
    }

    final class KeyIterator extends HashIterator
        implements _P0_Iterator_GP0_ {
        public final _p0_ next() { return nextNode().key; }
    }

    final class ValueIterator extends HashIterator
        implements _P1_Iterator_GP1_ {
        public final _p1_ next() { return nextNode().value; }
    }

    final class EntryIterator extends HashIterator
        implements ObjectIterator<_P0__P1_Map.Entry_gH_> {
        public final _P0__P1_Map.Entry_gH_ next() { return nextNode(); }
    }

    /* ------------------------------------------------------------ */
    // spliterators

    static class HashMapSpliterator_gH_ {
        final _P0__P1_HashMap_gH_ map;
        Node_gH_ current;          // current node
        int index;                  // current index, modified on advance/split
        int fence;                  // one past last index
        int est;                    // size estimate
        int expectedModCount;       // for comodification checks

        HashMapSpliterator(_P0__P1_HashMap_gH_ m, int origin,
                           int fence, int est,
                           int expectedModCount) {
            this.map = m;
            this.index = origin;
            this.fence = fence;
            this.est = est;
            this.expectedModCount = expectedModCount;
        }

        final int getFence() { // initialize fence and size on first use
            int hi;
            if ((hi = fence) < 0) {
                _P0__P1_HashMap_gH_ m = map;
                est = m.size;
                expectedModCount = m.modCount;
                Node_gH_[] tab = m.table;
                hi = fence = (tab == null) ? 0 : tab.length;
            }
            return hi;
        }

        public final long estimateSize() {
            getFence(); // force init
            return (long) est;
        }
    }

    static final class KeySpliterator_gH_
        extends HashMapSpliterator_gH_
        implements _P0_Spliterator_GP0_ {
        KeySpliterator(_P0__P1_HashMap_gH_ m, int origin, int fence, int est,
                       int expectedModCount) {
            super(m, origin, fence, est, expectedModCount);
        }

        public KeySpliterator_gH_ trySplit() {
            int hi = getFence(), lo = index, mid = (lo + hi) >>> 1;
            return (lo >= mid || current != null) ? null :
                new KeySpliterator_gH_(map, lo, index = mid, est >>>= 1,
                                        expectedModCount);
        }

        public void forEachRemaining(_P0_Consumer_GsuperP0_ action) {
            int i, hi, mc;
            if (action == null)
                throw new NullPointerException();
            _P0__P1_HashMap_gH_ m = map;
            Node_gH_[] tab = m.table;
            if ((hi = fence) < 0) {
                mc = expectedModCount = m.modCount;
                hi = fence = (tab == null) ? 0 : tab.length;
            }
            else
                mc = expectedModCount;
            if (tab != null && tab.length >= hi &&
                (i = index) >= 0 && (i < (index = hi) || current != null)) {
                Node_gH_ p = current;
                current = null;
                do {
                    if (p == null)
                        p = tab[i++];
                    else {
                        action.accept(p.key);
                        p = p.next;
                    }
                } while (p != null || i < hi);
                if (m.modCount != mc)
                    throw new ConcurrentModificationException();
            }
        }

        public boolean tryAdvance(_P0_Consumer_GsuperP0_ action) {
            int hi;
            if (action == null)
                throw new NullPointerException();
            Node_gH_[] tab = map.table;
            if (tab != null && tab.length >= (hi = getFence()) && index >= 0) {
                while (current != null || index < hi) {
                    if (current == null)
                        current = tab[index++];
                    else {
                        _p0_ k = current.key;
                        current = current.next;
                        action.accept(k);
                        if (map.modCount != expectedModCount)
                            throw new ConcurrentModificationException();
                        return true;
                    }
                }
            }
            return false;
        }

        public int characteristics() {
            return (fence < 0 || est == map.size ? Spliterator.SIZED : 0) |
                Spliterator.DISTINCT;
        }
    }

    static final class ValueSpliterator_gH_
        extends HashMapSpliterator_gH_
        implements _P1_Spliterator_GP1_ {
        ValueSpliterator(_P0__P1_HashMap_gH_ m, int origin, int fence, int est,
                         int expectedModCount) {
            super(m, origin, fence, est, expectedModCount);
        }

        public ValueSpliterator_gH_ trySplit() {
            int hi = getFence(), lo = index, mid = (lo + hi) >>> 1;
            return (lo >= mid || current != null) ? null :
                new ValueSpliterator_gH_(map, lo, index = mid, est >>>= 1,
                                          expectedModCount);
        }

        public void forEachRemaining(_P1_Consumer_GsuperP1_ action) {
            int i, hi, mc;
            if (action == null)
                throw new NullPointerException();
            _P0__P1_HashMap_gH_ m = map;
            Node_gH_[] tab = m.table;
            if ((hi = fence) < 0) {
                mc = expectedModCount = m.modCount;
                hi = fence = (tab == null) ? 0 : tab.length;
            }
            else
                mc = expectedModCount;
            if (tab != null && tab.length >= hi &&
                (i = index) >= 0 && (i < (index = hi) || current != null)) {
                Node_gH_ p = current;
                current = null;
                do {
                    if (p == null)
                        p = tab[i++];
                    else {
                        action.accept(p.value);
                        p = p.next;
                    }
                } while (p != null || i < hi);
                if (m.modCount != mc)
                    throw new ConcurrentModificationException();
            }
        }

        public boolean tryAdvance(_P1_Consumer_GsuperP1_ action) {
            int hi;
            if (action == null)
                throw new NullPointerException();
            Node_gH_[] tab = map.table;
            if (tab != null && tab.length >= (hi = getFence()) && index >= 0) {
                while (current != null || index < hi) {
                    if (current == null)
                        current = tab[index++];
                    else {
                        _p1_ v = current.value;
                        current = current.next;
                        action.accept(v);
                        if (map.modCount != expectedModCount)
                            throw new ConcurrentModificationException();
                        return true;
                    }
                }
            }
            return false;
        }

        public int characteristics() {
            return (fence < 0 || est == map.size ? Spliterator.SIZED : 0);
        }
    }

    static final class EntrySpliterator_gH_
        extends HashMapSpliterator_gH_
        implements ObjectSpliterator<_P0__P1_Map.Entry_gH_> {
        EntrySpliterator(_P0__P1_HashMap_gH_ m, int origin, int fence, int est,
                         int expectedModCount) {
            super(m, origin, fence, est, expectedModCount);
        }

        public EntrySpliterator_gH_ trySplit() {
            int hi = getFence(), lo = index, mid = (lo + hi) >>> 1;
            return (lo >= mid || current != null) ? null :
                new EntrySpliterator_gH_(map, lo, index = mid, est >>>= 1,
                                          expectedModCount);
        }

        public void forEachRemaining(ObjectConsumer<? super _P0__P1_Map.Entry_gH_> action) {
            int i, hi, mc;
            if (action == null)
                throw new NullPointerException();
            _P0__P1_HashMap_gH_ m = map;
            Node_gH_[] tab = m.table;
            if ((hi = fence) < 0) {
                mc = expectedModCount = m.modCount;
                hi = fence = (tab == null) ? 0 : tab.length;
            }
            else
                mc = expectedModCount;
            if (tab != null && tab.length >= hi &&
                (i = index) >= 0 && (i < (index = hi) || current != null)) {
                Node_gH_ p = current;
                current = null;
                do {
                    if (p == null)
                        p = tab[i++];
                    else {
                        action.accept(p);
                        p = p.next;
                    }
                } while (p != null || i < hi);
                if (m.modCount != mc)
                    throw new ConcurrentModificationException();
            }
        }

        public boolean tryAdvance(ObjectConsumer<? super _P0__P1_Map.Entry_gH_> action) {
            int hi;
            if (action == null)
                throw new NullPointerException();
            Node_gH_[] tab = map.table;
            if (tab != null && tab.length >= (hi = getFence()) && index >= 0) {
                while (current != null || index < hi) {
                    if (current == null)
                        current = tab[index++];
                    else {
                        Node_gH_ e = current;
                        current = current.next;
                        action.accept(e);
                        if (map.modCount != expectedModCount)
                            throw new ConcurrentModificationException();
                        return true;
                    }
                }
            }
            return false;
        }

        public int characteristics() {
            return (fence < 0 || est == map.size ? Spliterator.SIZED : 0) |
                Spliterator.DISTINCT;
        }
    }

    /* ------------------------------------------------------------ */
    // LinkedHashMap support

    public Node_gH_ newNode(int hash, _p0_ key, _p1_ value, Node_gH_ next) {
        return new Node_gH_(hash, key, value, next);
    }

    public Node_gH_ replacementNode(Node_gH_ p, Node_gH_ next) {
        return new Node_gH_(p.hash, p.key, p.value, next);
    }

    public TreeNode_gH_ newTreeNode(int hash, _p0_ key, _p1_ value, Node_gH_ next) {
        return new TreeNode_gH_(hash, key, value, next);
    }

    public TreeNode_gH_ replacementTreeNode(Node_gH_ p, Node_gH_ next) {
        return new TreeNode_gH_(p.hash, p.key, p.value, next);
    }

    public void reinitialize()  {
        table = null;
        entrySet = null;
        keySet = null;
        values = null;
        modCount = 0;
        threshold = 0;
        size = 0;
    }

    // Callbacks to allow LinkedHashMap post-actions
    public void afterNodeAccess(Node_gH_ p) { }
    public void afterNodeInsertion(boolean evict) { }
    public void afterNodeRemoval(Node_gH_ p) { }

    // Called only from writeObject, to ensure compatible ordering.
    public void internalWriteEntries(java.io.ObjectOutputStream s) throws IOException {
        Node_gH_[] tab;
        if (size > 0 && (tab = table) != null) {
            for (int i = 0; i < tab.length; ++i) {
                for (Node_gH_ e = tab[i]; e != null; e = e.next) {
                    s._writeP0_(e.key);
                    s._writeP1_(e.value);
                }
            }
        }
    }

    /* ------------------------------------------------------------ */
    // Tree bins

    public static final class TreeNode_gH_ extends _P0__P1_LinkedHashMap.Entry_gH_ {
        TreeNode_gH_ parent;  // red-black tree links
        TreeNode_gH_ left;
        TreeNode_gH_ right;
        TreeNode_gH_ prev;    // needed to unlink next upon deletion
        boolean red;
        public TreeNode(int hash, _p0_ key, _p1_ val, Node_gH_ next) {
            super(hash, key, val, next);
        }

        final TreeNode_gH_ root() {
            for (TreeNode_gH_ r = this, p;;) {
                if ((p = r.parent) == null)
                    return r;
                r = p;
            }
        }

        static _gH_ void moveRootToFront(Node_gH_[] tab, TreeNode_gH_ root) {
            int n;
            if (root != null && tab != null && (n = tab.length) > 0) {
                int index = (n - 1) & root.hash;
                TreeNode_gH_ first = (TreeNode_gH_) tab[index];
                if (root != first) {
                    Node_gH_ rn;
                    tab[index] = root;
                    TreeNode_gH_ rp = root.prev;
                    if ((rn = root.next) != null)
                        ((TreeNode_gH_) rn).prev = rp;
                    if (rp != null)
                        rp.next = rn;
                    if (first != null)
                        first.prev = root;
                    root.next = first;
                    root.prev = null;
                }
                assert checkInvariants(root);
            }
        }

        final TreeNode_gH_ find(int h, _nameP0_ k/*<%, Class<?> kc%>*/) {
            TreeNode_gH_ p = this;
            do {
                int ph, dir; _p0_ pk;
                TreeNode_gH_ pl = p.left, pr = p.right, q;
                if ((ph = p.hash) > h)
                    p = pl;
                else if (ph < h)
                    p = pr;
                else if ((pk = p.key) == k || this.equals(k, pk)/*(k != _P0E_ && k.equals(pk))*/)
                    return p;
                else if (pl == null)
                    p = pr;
                else if (pr == null)
                    p = pl;
                else if ((q = pr.find(h, k/*, kc*/)) != null)
                    return q;
                else
                    p = pl;
            } while (p != null);
            return null;
        }

        final TreeNode_gH_ getTreeNode(int h, _nameP0_ k) {
            return ((parent != null) ? root() : this).find(h, k/*, null*/);
        }

        static int tieBreakOrder(_nameP0_ a, _nameP0_ b) {
            /*int d;
            if (a == _P0E_ || b == _P0E_<% ||
                (d = a.getClass().getName().
                 compareTo(b.getClass().getName())) == 0%>)
                d = <%(System.identityHashCode(a) <= System.identityHashCode(b) ? -1 : 1);//%>1; //TODO?
            return d;*/
            return <%System.identityHashCode(a) <= System.identityHashCode(b) ? -1 : 1;//%>1;
        }

        final void treeify(Node_gH_[] tab) {
            TreeNode_gH_ root = null;
            for (TreeNode_gH_ x = this, next; x != null; x = next) {
                next = (TreeNode_gH_) x.next;
                x.left = x.right = null;
                if (root == null) {
                    x.parent = null;
                    x.red = false;
                    root = x;
                }
                else {
                    _p0_ k = x.key;
                    int h = x.hash;
                    //Class<?> kc = null;
                    for (TreeNode_gH_ p = root;;) {
                        int dir, ph;
                        _p0_ pk = p.key;
                        if ((ph = p.hash) > h)
                            dir = -1;
                        else if (ph < h)
                            dir = 1;
                        else dir = tieBreakOrder(k, pk);

                        TreeNode_gH_ xp = p;
                        if ((p = (dir <= 0) ? p.left : p.right) == null) {
                            x.parent = xp;
                            if (dir <= 0)
                                xp.left = x;
                            else
                                xp.right = x;
                            root = balanceInsertion(root, x);
                            break;
                        }
                    }
                }
            }
            moveRootToFront(tab, root);
        }

        final Node_gH_ untreeify(_P0__P1_HashMap_gH_ map) {
            Node_gH_ hd = null, tl = null;
            for (Node_gH_ q = this; q != null; q = q.next) {
                Node_gH_ p = map.replacementNode(q, null);
                if (tl == null)
                    hd = p;
                else
                    tl.next = p;
                tl = p;
            }
            return hd;
        }

        final TreeNode_gH_ putTreeVal(_P0__P1_HashMap_gH_ map, Node_gH_[] tab,
                                       int h, _p0_ k, _p1_ v) {
            boolean searched = false;
            TreeNode_gH_ root = (parent != null) ? root() : this;
            for (TreeNode_gH_ p = root;;) {
                int dir, ph; _p0_ pk;
                if ((ph = p.hash) > h)
                    dir = -1;
                else if (ph < h)
                    dir = 1;
                else if ((pk = p.key) == k || this.equals(k, pk)/*(k != null && k.equals(pk))*/)
                    return p;
                else dir = tieBreakOrder(k, pk);

                TreeNode_gH_ xp = p;
                if ((p = (dir <= 0) ? p.left : p.right) == null) {
                    Node_gH_ xpn = xp.next;
                    TreeNode_gH_ x = map.newTreeNode(h, k, v, xpn);
                    if (dir <= 0)
                        xp.left = x;
                    else
                        xp.right = x;
                    xp.next = x;
                    x.parent = x.prev = xp;
                    if (xpn != null)
                        ((TreeNode_gH_) xpn).prev = x;
                    moveRootToFront(tab, balanceInsertion(root, x));
                    return null;
                }
            }
        }

        final void removeTreeNode(_P0__P1_HashMap_gH_ map, Node_gH_[] tab,
                                  boolean movable) {
            int n;
            if (tab == null || (n = tab.length) == 0)
                return;
            int index = (n - 1) & hash;
            TreeNode_gH_ first = (TreeNode_gH_) tab[index], root = first, rl;
            TreeNode_gH_ succ = (TreeNode_gH_) next, pred = prev;
            if (pred == null)
                tab[index] = first = succ;
            else
                pred.next = succ;
            if (succ != null)
                succ.prev = pred;
            if (first == null)
                return;
            if (root.parent != null)
                root = root.root();
            if (root == null || root.right == null ||
                (rl = root.left) == null || rl.left == null) {
                tab[index] = first.untreeify(map);  // too small
                return;
            }
            TreeNode_gH_ p = this, pl = left, pr = right, replacement;
            if (pl != null && pr != null) {
                TreeNode_gH_ s = pr, sl;
                while ((sl = s.left) != null) // find successor
                    s = sl;
                boolean c = s.red; s.red = p.red; p.red = c; // swap colors
                TreeNode_gH_ sr = s.right;
                TreeNode_gH_ pp = p.parent;
                if (s == pr) { // p was s's direct parent
                    p.parent = s;
                    s.right = p;
                }
                else {
                    TreeNode_gH_ sp = s.parent;
                    if ((p.parent = sp) != null) {
                        if (s == sp.left)
                            sp.left = p;
                        else
                            sp.right = p;
                    }
                    if ((s.right = pr) != null)
                        pr.parent = s;
                }
                p.left = null;
                if ((p.right = sr) != null)
                    sr.parent = p;
                if ((s.left = pl) != null)
                    pl.parent = s;
                if ((s.parent = pp) == null)
                    root = s;
                else if (p == pp.left)
                    pp.left = s;
                else
                    pp.right = s;
                if (sr != null)
                    replacement = sr;
                else
                    replacement = p;
            }
            else if (pl != null)
                replacement = pl;
            else if (pr != null)
                replacement = pr;
            else
                replacement = p;
            if (replacement != p) {
                TreeNode_gH_ pp = replacement.parent = p.parent;
                if (pp == null)
                    root = replacement;
                else if (p == pp.left)
                    pp.left = replacement;
                else
                    pp.right = replacement;
                p.left = p.right = p.parent = null;
            }

            TreeNode_gH_ r = p.red ? root : balanceDeletion(root, replacement);

            if (replacement == p) {  // detach
                TreeNode_gH_ pp = p.parent;
                p.parent = null;
                if (pp != null) {
                    if (p == pp.left)
                        pp.left = null;
                    else if (p == pp.right)
                        pp.right = null;
                }
            }
            if (movable)
                moveRootToFront(tab, r);
        }

        final void split(_P0__P1_HashMap_gH_ map, Node_gH_[] tab, int index, int bit) {
            TreeNode_gH_ b = this;
            // Relink into lo and hi lists, preserving order
            TreeNode_gH_ loHead = null, loTail = null;
            TreeNode_gH_ hiHead = null, hiTail = null;
            int lc = 0, hc = 0;
            for (TreeNode_gH_ e = b, next; e != null; e = next) {
                next = (TreeNode_gH_) e.next;
                e.next = null;
                if ((e.hash & bit) == 0) {
                    if ((e.prev = loTail) == null)
                        loHead = e;
                    else
                        loTail.next = e;
                    loTail = e;
                    ++lc;
                }
                else {
                    if ((e.prev = hiTail) == null)
                        hiHead = e;
                    else
                        hiTail.next = e;
                    hiTail = e;
                    ++hc;
                }
            }

            if (loHead != null) {
                if (lc <= UNTREEIFY_THRESHOLD)
                    tab[index] = loHead.untreeify(map);
                else {
                    tab[index] = loHead;
                    if (hiHead != null) // (else is already treeified)
                        loHead.treeify(tab);
                }
            }
            if (hiHead != null) {
                if (hc <= UNTREEIFY_THRESHOLD)
                    tab[index + bit] = hiHead.untreeify(map);
                else {
                    tab[index + bit] = hiHead;
                    if (loHead != null)
                        hiHead.treeify(tab);
                }
            }
        }

        /* ------------------------------------------------------------ */
        // Red-black tree methods, all adapted from CLR
        static _gH_ TreeNode_gH_ rotateLeft(TreeNode_gH_ root,
                                              TreeNode_gH_ p) {
            TreeNode_gH_ r, pp, rl;
            if (p != null && (r = p.right) != null) {
                if ((rl = p.right = r.left) != null)
                    rl.parent = p;
                if ((pp = r.parent = p.parent) == null)
                    (root = r).red = false;
                else if (pp.left == p)
                    pp.left = r;
                else
                    pp.right = r;
                r.left = p;
                p.parent = r;
            }
            return root;
        }

        static _gH_ TreeNode_gH_ rotateRight(TreeNode_gH_ root,
                                               TreeNode_gH_ p) {
            TreeNode_gH_ l, pp, lr;
            if (p != null && (l = p.left) != null) {
                if ((lr = p.left = l.right) != null)
                    lr.parent = p;
                if ((pp = l.parent = p.parent) == null)
                    (root = l).red = false;
                else if (pp.right == p)
                    pp.right = l;
                else
                    pp.left = l;
                l.right = p;
                p.parent = l;
            }
            return root;
        }

        static _gH_ TreeNode_gH_ balanceInsertion(TreeNode_gH_ root,
                                                    TreeNode_gH_ x) {
            x.red = true;
            for (TreeNode_gH_ xp, xpp, xppl, xppr;;) {
                if ((xp = x.parent) == null) {
                    x.red = false;
                    return x;
                }
                else if (!xp.red || (xpp = xp.parent) == null)
                    return root;
                if (xp == (xppl = xpp.left)) {
                    if ((xppr = xpp.right) != null && xppr.red) {
                        xppr.red = false;
                        xp.red = false;
                        xpp.red = true;
                        x = xpp;
                    }
                    else {
                        if (x == xp.right) {
                            root = rotateLeft(root, x = xp);
                            xpp = (xp = x.parent) == null ? null : xp.parent;
                        }
                        if (xp != null) {
                            xp.red = false;
                            if (xpp != null) {
                                xpp.red = true;
                                root = rotateRight(root, xpp);
                            }
                        }
                    }
                }
                else {
                    if (xppl != null && xppl.red) {
                        xppl.red = false;
                        xp.red = false;
                        xpp.red = true;
                        x = xpp;
                    }
                    else {
                        if (x == xp.left) {
                            root = rotateRight(root, x = xp);
                            xpp = (xp = x.parent) == null ? null : xp.parent;
                        }
                        if (xp != null) {
                            xp.red = false;
                            if (xpp != null) {
                                xpp.red = true;
                                root = rotateLeft(root, xpp);
                            }
                        }
                    }
                }
            }
        }

        static _gH_ TreeNode_gH_ balanceDeletion(TreeNode_gH_ root,
                                                   TreeNode_gH_ x) {
            for (TreeNode_gH_ xp, xpl, xpr;;)  {
                if (x == null || x == root)
                    return root;
                else if ((xp = x.parent) == null) {
                    x.red = false;
                    return x;
                }
                else if (x.red) {
                    x.red = false;
                    return root;
                }
                else if ((xpl = xp.left) == x) {
                    if ((xpr = xp.right) != null && xpr.red) {
                        xpr.red = false;
                        xp.red = true;
                        root = rotateLeft(root, xp);
                        xpr = (xp = x.parent) == null ? null : xp.right;
                    }
                    if (xpr == null)
                        x = xp;
                    else {
                        TreeNode_gH_ sl = xpr.left, sr = xpr.right;
                        if ((sr == null || !sr.red) &&
                            (sl == null || !sl.red)) {
                            xpr.red = true;
                            x = xp;
                        }
                        else {
                            if (sr == null || !sr.red) {
                                if (sl != null)
                                    sl.red = false;
                                xpr.red = true;
                                root = rotateRight(root, xpr);
                                xpr = (xp = x.parent) == null ?
                                    null : xp.right;
                            }
                            if (xpr != null) {
                                xpr.red = (xp == null) ? false : xp.red;
                                if ((sr = xpr.right) != null)
                                    sr.red = false;
                            }
                            if (xp != null) {
                                xp.red = false;
                                root = rotateLeft(root, xp);
                            }
                            x = root;
                        }
                    }
                }
                else { // symmetric
                    if (xpl != null && xpl.red) {
                        xpl.red = false;
                        xp.red = true;
                        root = rotateRight(root, xp);
                        xpl = (xp = x.parent) == null ? null : xp.left;
                    }
                    if (xpl == null)
                        x = xp;
                    else {
                        TreeNode_gH_ sl = xpl.left, sr = xpl.right;
                        if ((sl == null || !sl.red) &&
                            (sr == null || !sr.red)) {
                            xpl.red = true;
                            x = xp;
                        }
                        else {
                            if (sl == null || !sl.red) {
                                if (sr != null)
                                    sr.red = false;
                                xpl.red = true;
                                root = rotateLeft(root, xpl);
                                xpl = (xp = x.parent) == null ?
                                    null : xp.left;
                            }
                            if (xpl != null) {
                                xpl.red = (xp == null) ? false : xp.red;
                                if ((sl = xpl.left) != null)
                                    sl.red = false;
                            }
                            if (xp != null) {
                                xp.red = false;
                                root = rotateRight(root, xp);
                            }
                            x = root;
                        }
                    }
                }
            }
        }

        static _gH_ boolean checkInvariants(TreeNode_gH_ t) {
            TreeNode_gH_ tp = t.parent, tl = t.left, tr = t.right,
                tb = t.prev, tn = (TreeNode_gH_) t.next;
            if (tb != null && tb.next != t)
                return false;
            if (tn != null && tn.prev != t)
                return false;
            if (tp != null && t != tp.left && t != tp.right)
                return false;
            if (tl != null && (tl.parent != t || tl.hash > t.hash))
                return false;
            if (tr != null && (tr.parent != t || tr.hash < t.hash))
                return false;
            if (t.red && tl != null && tl.red && tr != null && tr.red)
                return false;
            if (tl != null && !checkInvariants(tl))
                return false;
            if (tr != null && !checkInvariants(tr))
                return false;
            return true;
        }
    }
}